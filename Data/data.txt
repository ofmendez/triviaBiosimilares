[
    {
        "Questions":[
            {
                "id": "0",
                "statement": "Un medicamento biosimilar es:",
                "popup": "La meta es demostrar similitud; establecer el puente científico a la experiencia clínica del producto de referencia.¹ <span class=\"FuenteRetroalimentacion\">1. U.S. Food and Drug Administration. Conceptos básicos de los biosimilares para los pacientes.</span>",
                "ayuda": "Un Biosimilar debe demostrar calidad, eficacia y seguridad similar al medicamento innovador de referencia.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"Una copia exacta de un producto con el que se compara.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"Es un biológico genérico.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"Es un biológico sin diferencias clínicas significativas vs el producto con el que se compara.",
                        "isCorrect": true 
                    },
                    {
                        "id":"3",
                        "text":"Es un biológico mejorado",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "1",
                "statement": "Desarrollar biosimilares es un proceso complejo en el cual se requiere:",
                "popup": "Desarrollar biosimilares es un proceso complejo que requiere líneas celulares personalizadas, nuevos procesos de fabricación y una experiencia considerable.¹ <span class=\"FuenteRetroalimentacion\">1. www.amgenbiosimilares.com</span>",
                "ayuda": "Los Biosimilares al ser medicamentos Biológicos (células vivas¹) requieren múltiples puntos de control para asegurar la calidad en cada etapa del proceso. 1. www.amgenbiosimilares.com.co",
                "Answers":[
                    {
                        "id":"0",
                        "text":"Procesos de fabricación robustos y una experiencia considerable.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"Altos estándares de calidad.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"A y B son ciertas.",
                        "isCorrect": true 
                    },
                    {
                        "id":"3",
                        "text":"Conocer la fórmula exacta del producto de referencia.",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "2",
                "statement": "En Colombia actualmente se comercializan alrededor de:",
                "popup": "En Colombia hasta el 3er trimestre del 2022 se comercializan alrededor de 20 Biosimilares en diferentes áreas terapéuticas.¹ <span class=\"FuenteRetroalimentacion\">1. Data SISMED 2022Q3</span>",
                "ayuda": "La aprobación de Biosimilares ha venido en aumento en los últimos 2 años, para el 2020 habían ya 9 Biosimilares disponibles en Colombia.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"20 Biosimilares",
                        "isCorrect": true 
                    },
                    {
                        "id":"1",
                        "text":"35 Biosimilares",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"25 Biosimilares",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"15 Biosimilares",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "3",
                "statement": "El switch es un concepto de los Biosimilares que se refiere a:",
                "popup": "El switch se da cuando el prescriptor decide cambiar un biológico por otro con el mismo objetivo terapéutico.¹ <span class=\"FuenteRetroalimentacion\">1. European Medicines Agency and the European Commission. Biosimilars in the EU - Information guide for healthcare professionals.</span>",
                "ayuda": "Switch de la palabra en ingles que traduce cambiar.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"Cambiar un genérico por un biológico.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"Reemplazar en la farmacia un biológico por otro similar.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"Cambiar por parte del prescriptor un biólogico por otro con el mismo objetivo terapéutico",
                        "isCorrect": true 
                    },
                    {
                        "id":"3",
                        "text":"A y C son correctas.",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "4",
                "statement": "Se conoce como totalidad de la evidencia a:",
                "popup": "El biosimilar debe someterse a un desarrollo clínico completo para demostrar la misma eficacia, seguridad y calidad que el medicamento de referencia.¹ <span class=\"FuenteRetroalimentacion\">1. www.amgenbiosimilars.com/fr-fr/our-products/clinical-trials/</span>",
                "ayuda": "Para ser aprobado el medicamento biosimilar debe someterse a un desarrollo clínico riguroso y completo.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"Los estudios de farmacocinética y farmacodinámica.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"Los estudios de caracterización analítica vs el producto de referencia.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"Los estudios fase 3.",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"El paquete completo de datos científicos que confirma la Biosimilaridad de un producto vs el de referencia.",
                        "isCorrect": true 
                    }
                ]
            },
            {
                "id": "5",
                "statement": "Dentro de los primeros fármacos biológicos desarrollados se encuentra:",
                "popup": "Los primeros biológicos, como la insulina, eran versiones modificadas de proteínas humanas, hoy en día ya se pueden diseñar estructuras moleculares mucho más complejas.¹ <span class=\"FuenteRetroalimentacion\">1. www.amgen.es/nuestra-ciencia/modalidades-terapeuticas</span>",
                "ayuda": "Este primer fármaco biológico era una versión modificada de proteínas humanas.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"La insulina.",
                        "isCorrect": true 
                    },
                    {
                        "id":"1",
                        "text":"La penisilina.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"Las inmunoterapias.",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"Todas las anteriores.",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "6",
                "statement": "Hasta finales del 2022, la FDA había aprobado:",
                "popup": "Los Biosimilares son medicamentos seguros y eficaces para el tratamiento de muchas enfermedades.¹ <span class=\"FuenteRetroalimentacion\">1. U.S. Food and Drug Administration. Conceptos básicos de los biosimilares para los pacientes.</span>",
                "ayuda": "Para finales del 2022 se habián aprobado más de 20 medicamentos Biosimilares.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"Más de 35 Biosimilares.",
                        "isCorrect": true
                    },
                    {
                        "id":"1",
                        "text":"Más de 55 Biosimilares.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"Más de 25 Biosimilares.",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"Más de 15 Biosimilares.",
                        "isCorrect": false 
                    }
                ]
            },
            {
                "id": "7",
                "statement": "Algunos de los criterios más importantes para definir el uso de un Biosimilar pueden ser:",
                "popup": "El desarrollo de productos biológicos es un proceso altamente especializado y de varios pasos, y Amgen cuenta con una amplia experiencia en todas las fases, desde el desarrollo hasta la fabricación, para ayudar a garantizar un suministro confiable.¹ <span class=\"FuenteRetroalimentacion\">1. www.amgenbiosimilares.com.co/Knowledge.html</span>",
                "ayuda": "Existen multiples criterios a tener en cuenta para definir el uso de un medicamento biosimilar.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"El suministro y calidad de los productos.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"La evidencia clínica y el ahorro potencial.",
                        "isCorrect": false 
                    },
                    {
                        "id":"2",
                        "text":"La aprobación por parte de la EMA, FDA y el Invima.",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"Todas las anteriores.",
                        "isCorrect": true 
                    }
                ]
            },
            {
                "id": "8",
                "statement": "El primer Biosimilar en el mundo se aprobó en el año:",
                "popup": "Para seguir aprendiendo sobre Biosimilares consulta www.amgenbiosimilares.com.co ¹ <span class=\"FuenteRetroalimentacion\">1. www.amgenbiosimilares.com.co/Knowledge.html</span>",
                "ayuda": "Antes del año 2010 ya contabamos con medicamentos biosimilares aprobados por la FDA.",
                "Answers":[
                    {
                        "id":"0",
                        "text":"2005 por la FDA y la EMA.",
                        "isCorrect": false 
                    },
                    {
                        "id":"1",
                        "text":"2006 por la FDA y la EMA.",
                        "isCorrect": true 
                    },
                    {
                        "id":"2",
                        "text":"2008 por la FDA y la EMA.",
                        "isCorrect": false 
                    },
                    {
                        "id":"3",
                        "text":"2014 por la FDA y la EMA.",
                        "isCorrect": false 
                    }
                ]
            }
        ]   
    }
]
